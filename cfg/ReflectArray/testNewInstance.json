{
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null
    },
    {
      "id": 2,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i85, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=<))",
      "line": 10
    },
    {
      "id": 3,
      "label": "Try",
      "line": 14
    },
    {
      "id": 4,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i5, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=<))",
      "line": 15
    },
    {
      "id": 5,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i12, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=<))",
      "line": 16
    },
    {
      "id": 6,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"world30\"))",
      "line": 17
    },
    {
      "id": 7,
      "label": "Update(MemberReference(member=__cfwr_i12, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 16
    },
    {
      "id": 8,
      "label": "Update(MemberReference(member=__cfwr_i5, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 15
    },
    {
      "id": 9,
      "label": "Catch(__cfwr_e48)",
      "line": null
    },
    {
      "id": 10,
      "label": "Catch(__cfwr_e14)",
      "line": null
    },
    {
      "id": 11,
      "label": "Catch(__cfwr_e91)",
      "line": null
    },
    {
      "id": 12,
      "label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=&&))",
      "line": 29
    },
    {
      "id": 13,
      "label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true))",
      "line": 30
    },
    {
      "id": 14,
      "label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=94.82), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='a'), operator=|))",
      "line": 31
    },
    {
      "id": 15,
      "label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=339L), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=+))",
      "line": 32
    },
    {
      "id": 16,
      "label": "If(BinaryOperation(operandl=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=306L), operator=<<), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=17.63), operator=|), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=&&))",
      "line": 33
    },
    {
      "id": 17,
      "label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=607), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=*))",
      "line": 34
    },
    {
      "id": 18,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=44.46), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=<<), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=28.42), operator=/), name=__cfwr_temp85)], modifiers=set(), type=BasicType(dimensions=[], name=float))",
      "line": 35
    },
    {
      "id": 19,
      "label": "Break",
      "line": 43
    },
    {
      "id": 20,
      "label": "Update(MemberReference(member=__cfwr_i85, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 10
    },
    {
      "id": 21,
      "label": "MethodInvocation(arguments=[ClassReference(postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Object, sub_type=None)), MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=newInstance, postfix_operators=[], prefix_operators=[], qualifier=Array, selectors=[], type_arguments=None)",
      "line": 50
    },
    {
      "id": 22,
      "label": "If(BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>=))",
      "line": 49
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 21
    },
    {
      "source": 3,
      "target": 3
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 9
    },
    {
      "source": 3,
      "target": 10
    },
    {
      "source": 3,
      "target": 11
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 12
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 8
    },
    {
      "source": 7,
      "target": 5
    },
    {
      "source": 8,
      "target": 4
    },
    {
      "source": 9,
      "target": 12
    },
    {
      "source": 10,
      "target": 12
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 12,
      "target": 20
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 20
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 14,
      "target": 19
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 15,
      "target": 19
    },
    {
      "source": 16,
      "target": 17
    },
    {
      "source": 16,
      "target": 19
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 17,
      "target": 19
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 20,
      "target": 2
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 1
    },
    {
      "source": 22,
      "target": 21
    },
    {
      "source": 22,
      "target": 1
    }
  ]
}