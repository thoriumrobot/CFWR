{
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null
    },
    {
      "id": 2,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_item3)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Integer, sub_type=None))",
      "line": 18
    },
    {
      "id": 3,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_var73)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Boolean, sub_type=None))",
      "line": 19
    },
    {
      "id": 4,
      "label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=201), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='g'), operator=^))",
      "line": 20
    },
    {
      "id": 5,
      "label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='W'), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=/))",
      "line": 21
    },
    {
      "id": 6,
      "label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=43.54f), operator=%), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=-), operator=||))",
      "line": 22
    },
    {
      "id": 7,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i9, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), operator=<))",
      "line": 23
    },
    {
      "id": 8,
      "label": "Try",
      "line": 24
    },
    {
      "id": 9,
      "label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "line": 25
    },
    {
      "id": 10,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_node39)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Object, sub_type=None))",
      "line": 26
    },
    {
      "id": 11,
      "label": "Break",
      "line": 36
    },
    {
      "id": 12,
      "label": "Catch(__cfwr_e70)",
      "line": null
    },
    {
      "id": 13,
      "label": "Update(MemberReference(member=__cfwr_i9, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 23
    },
    {
      "id": 14,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "line": 38
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 14
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 11
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 6,
      "target": 11
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 11
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 8,
      "target": 12
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 13
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 13,
      "target": 7
    }
  ]
}