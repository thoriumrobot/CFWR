{
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null
    },
    {
      "id": 2,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i49, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=7), operator=<))",
      "line": 12
    },
    {
      "id": 3,
      "label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "line": 13
    },
    {
      "id": 4,
      "label": "Try",
      "line": 20
    },
    {
      "id": 5,
      "label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true))",
      "line": 15
    },
    {
      "id": 6,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i10, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=<))",
      "line": 16
    },
    {
      "id": 7,
      "label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='9'), operator=>>), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=61.21), operator=/), operator=&&))",
      "line": 17
    },
    {
      "id": 8,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i42, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5), operator=<))",
      "line": 18
    },
    {
      "id": 9,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i77, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=9), operator=<))",
      "line": 21
    },
    {
      "id": 10,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=897L))",
      "line": 22
    },
    {
      "id": 11,
      "label": "Update(MemberReference(member=__cfwr_i77, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 21
    },
    {
      "id": 12,
      "label": "Catch(__cfwr_e40)",
      "line": null
    },
    {
      "id": 13,
      "label": "Catch(__cfwr_e31)",
      "line": null
    },
    {
      "id": 14,
      "label": "Update(MemberReference(member=__cfwr_i42, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 18
    },
    {
      "id": 15,
      "label": "Update(MemberReference(member=__cfwr_i10, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 16
    },
    {
      "id": 16,
      "label": "Break",
      "line": 38
    },
    {
      "id": 17,
      "label": "Catch(__cfwr_e75)",
      "line": null
    },
    {
      "id": 18,
      "label": "Update(MemberReference(member=__cfwr_i49, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 12
    },
    {
      "id": 19,
      "label": "If(BinaryOperation(operandl=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===))",
      "line": 42
    },
    {
      "id": 20,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1))",
      "line": 59
    },
    {
      "id": 21,
      "label": "If(BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator===))",
      "line": 45
    },
    {
      "id": 22,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0))",
      "line": 46
    },
    {
      "id": 23,
      "label": "If(BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), operator=>))",
      "line": 48
    },
    {
      "id": 24,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\\n\"), BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)], member=indexOf, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), name=newlinePos)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 51
    },
    {
      "id": 25,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=newlinePos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1), operator===), if_false=BinaryOperation(operandl=MemberReference(member=newlinePos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), if_true=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])), name=afterNewline)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 52
    },
    {
      "id": 26,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\\r\\n\"), BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=-)], member=indexOf, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), name=returnPos1)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 53
    },
    {
      "id": 27,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\\r\"), BinaryOperation(operandl=MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-)], member=indexOf, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), name=returnPos2)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 54
    },
    {
      "id": 28,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=returnPos1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1), operator===), if_false=BinaryOperation(operandl=MemberReference(member=returnPos1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=+), if_true=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])), name=afterReturn1)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 55
    },
    {
      "id": 29,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=returnPos2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1), operator===), if_false=BinaryOperation(operandl=MemberReference(member=returnPos2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=+), if_true=MemberReference(member=MAX_VALUE, postfix_operators=[], prefix_operators=[], qualifier=Integer, selectors=[])), name=afterReturn2)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 56
    },
    {
      "id": 30,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=afterNewline, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[MemberReference(member=afterReturn1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=afterReturn2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=min, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None)], member=min, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), name=lineStart)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 57
    },
    {
      "id": 31,
      "label": "If(BinaryOperation(operandl=MemberReference(member=lineStart, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MethodInvocation(arguments=[], member=length, postfix_operators=[], prefix_operators=[], qualifier=s, selectors=[], type_arguments=None), operator=>=))",
      "line": 58
    },
    {
      "id": 32,
      "label": "Return(MemberReference(member=lineStart, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 61
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 19
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 18
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 4
    },
    {
      "source": 4,
      "target": 9
    },
    {
      "source": 4,
      "target": 12
    },
    {
      "source": 4,
      "target": 13
    },
    {
      "source": 4,
      "target": 17
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 5,
      "target": 16
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 6,
      "target": 16
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 15
    },
    {
      "source": 8,
      "target": 4
    },
    {
      "source": 8,
      "target": 15
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 14
    },
    {
      "source": 11,
      "target": 9
    },
    {
      "source": 12,
      "target": 14
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 14,
      "target": 8
    },
    {
      "source": 15,
      "target": 6
    },
    {
      "source": 17,
      "target": 16
    },
    {
      "source": 18,
      "target": 2
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 21
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 21,
      "target": 23
    },
    {
      "source": 23,
      "target": 20
    },
    {
      "source": 23,
      "target": 24
    },
    {
      "source": 24,
      "target": 25
    },
    {
      "source": 25,
      "target": 26
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 28,
      "target": 29
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 30,
      "target": 31
    },
    {
      "source": 31,
      "target": 20
    },
    {
      "source": 31,
      "target": 32
    }
  ]
}