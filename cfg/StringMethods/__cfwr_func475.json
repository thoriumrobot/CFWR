{
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null
    },
    {
      "id": 2,
      "label": "Try",
      "line": 83
    },
    {
      "id": 3,
      "label": "If(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=/), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=||))",
      "line": 51
    },
    {
      "id": 4,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=631), name=__cfwr_node97)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 52
    },
    {
      "id": 5,
      "label": "Catch(__cfwr_e99)",
      "line": null
    },
    {
      "id": 6,
      "label": "While(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='b'), operator=^))",
      "line": 57
    },
    {
      "id": 7,
      "label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true))",
      "line": 87
    },
    {
      "id": 8,
      "label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value='l'), operandr=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=29.77f), operandr=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=327), operator=|), operator=/), operator=||))",
      "line": 59
    },
    {
      "id": 9,
      "label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=&&))",
      "line": 61
    },
    {
      "id": 10,
      "label": "If(BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=409), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=99.48), operator=-), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=||))",
      "line": 62
    },
    {
      "id": 11,
      "label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=&&))",
      "line": 64
    },
    {
      "id": 12,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_val67)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Double, sub_type=None))",
      "line": 65
    },
    {
      "id": 13,
      "label": "Catch(__cfwr_e6)",
      "line": null
    },
    {
      "id": 14,
      "label": "Catch(__cfwr_e22)",
      "line": null
    },
    {
      "id": 15,
      "label": "Break",
      "line": 97
    },
    {
      "id": 16,
      "label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operator=||))",
      "line": 84
    },
    {
      "id": 17,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i61, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=10), operator=<))",
      "line": 85
    },
    {
      "id": 18,
      "label": "If(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), operandr=BinaryOperation(operandl=BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=83.79), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=|), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), operator=-), operator=||))",
      "line": 86
    },
    {
      "id": 19,
      "label": "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=__cfwr_var9)], modifiers=set(), type=BasicType(dimensions=[], name=byte))",
      "line": 88
    },
    {
      "id": 20,
      "label": "Update(MemberReference(member=__cfwr_i61, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 85
    },
    {
      "id": 21,
      "label": "Catch(__cfwr_e53)",
      "line": null
    },
    {
      "id": 22,
      "label": "Catch(__cfwr_e50)",
      "line": null
    },
    {
      "id": 23,
      "label": "Catch(__cfwr_e57)",
      "line": null
    },
    {
      "id": 24,
      "label": "Return(BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=871L), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=*))",
      "line": 105
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 5
    },
    {
      "source": 2,
      "target": 9
    },
    {
      "source": 2,
      "target": 11
    },
    {
      "source": 2,
      "target": 13
    },
    {
      "source": 2,
      "target": 14
    },
    {
      "source": 2,
      "target": 2
    },
    {
      "source": 2,
      "target": 7
    },
    {
      "source": 2,
      "target": 16
    },
    {
      "source": 2,
      "target": 21
    },
    {
      "source": 2,
      "target": 22
    },
    {
      "source": 2,
      "target": 23
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 6
    },
    {
      "source": 4,
      "target": 6
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 6,
      "target": 2
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 15
    },
    {
      "source": 7,
      "target": 2
    },
    {
      "source": 7,
      "target": 19
    },
    {
      "source": 7,
      "target": 20
    },
    {
      "source": 7,
      "target": 24
    },
    {
      "source": 8,
      "target": 2
    },
    {
      "source": 8,
      "target": 15
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 15
    },
    {
      "source": 10,
      "target": 2
    },
    {
      "source": 10,
      "target": 15
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 15
    },
    {
      "source": 12,
      "target": 15
    },
    {
      "source": 13,
      "target": 15
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 16,
      "target": 17
    },
    {
      "source": 16,
      "target": 15
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 17,
      "target": 15
    },
    {
      "source": 18,
      "target": 7
    },
    {
      "source": 18,
      "target": 20
    },
    {
      "source": 19,
      "target": 15
    },
    {
      "source": 20,
      "target": 17
    },
    {
      "source": 21,
      "target": 15
    },
    {
      "source": 22,
      "target": 24
    },
    {
      "source": 23,
      "target": 24
    }
  ]
}