{
  "nodes": [
    {
      "id": 0,
      "label": "Entry",
      "line": null
    },
    {
      "id": 1,
      "label": "Exit",
      "line": null
    },
    {
      "id": 2,
      "label": "For(BinaryOperation(operandl=MemberReference(member=__cfwr_i43, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=<))",
      "line": 10
    },
    {
      "id": 3,
      "label": "While(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false))",
      "line": 11
    },
    {
      "id": 4,
      "label": "Try",
      "line": 13
    },
    {
      "id": 5,
      "label": "Return(Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null))",
      "line": 14
    },
    {
      "id": 6,
      "label": "Catch(__cfwr_e4)",
      "line": null
    },
    {
      "id": 7,
      "label": "Catch(__cfwr_e87)",
      "line": null
    },
    {
      "id": 8,
      "label": "Break",
      "line": 21
    },
    {
      "id": 9,
      "label": "Update(MemberReference(member=__cfwr_i43, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]))",
      "line": 10
    },
    {
      "id": 10,
      "label": "MethodInvocation(arguments=[MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=nextClearBit, postfix_operators=[], prefix_operators=[], qualifier=b, selectors=[], type_arguments=None)], member=set, postfix_operators=[], prefix_operators=[], qualifier=b, selectors=[], type_arguments=None)",
      "line": 25
    },
    {
      "id": 11,
      "label": "MethodInvocation(arguments=[MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=nextSetBit, postfix_operators=[], prefix_operators=[], qualifier=b, selectors=[], type_arguments=None)], member=clear, postfix_operators=[], prefix_operators=[], qualifier=b, selectors=[], type_arguments=None)",
      "line": 26
    },
    {
      "id": 12,
      "label": "LocalVariableDeclaration(annotations=[Annotation(element=None, name=GTENegativeOne)], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)], member=nextSetBit, postfix_operators=[], prefix_operators=[], qualifier=b, selectors=[], type_arguments=None), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 28
    },
    {
      "id": 13,
      "label": "LocalVariableDeclaration(annotations=[Annotation(element=None, name=GTENegativeOne)], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1)], member=previousClearBit, postfix_operators=[], prefix_operators=[], qualifier=b, selectors=[], type_arguments=None), name=j)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 30
    },
    {
      "id": 14,
      "label": "LocalVariableDeclaration(annotations=[Annotation(element=None, name=GTENegativeOne)], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=['-'], qualifier=None, selectors=[], value=1)], member=previousSetBit, postfix_operators=[], prefix_operators=[], qualifier=b, selectors=[], type_arguments=None), name=k)], modifiers=set(), type=BasicType(dimensions=[], name=int))",
      "line": 32
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 10
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 9
    },
    {
      "source": 4,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 6
    },
    {
      "source": 4,
      "target": 7
    },
    {
      "source": 6,
      "target": 8
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 9,
      "target": 2
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 14,
      "target": 1
    }
  ]
}