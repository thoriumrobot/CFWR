{
  "timestamp": "2025-09-26T06:06:03.118872",
  "dataset_metadata": {
    "train_samples": 200,
    "test_samples": 50,
    "patterns": [
      "array_indexing_simple",
      "length_validation",
      "search_result",
      "no_annotation_needed",
      "loop_bounds",
      "substring_operation",
      "array_creation",
      "complex_indexing",
      "misleading_index",
      "collection_constraints"
    ],
    "annotation_types": [
      "NO_ANNOTATION",
      "@Positive",
      "@NonNegative",
      "@GTENegativeOne",
      "@MinLen",
      "@ArrayLen",
      "@LengthOf",
      "@LTLengthOf",
      "@GTLengthOf",
      "@IndexFor",
      "@SearchIndexFor",
      "@SearchIndexBottom"
    ],
    "complexity_distribution": {
      "medium": 93,
      "very_hard": 43,
      "easy": 60,
      "hard": 54
    },
    "annotation_distribution": {
      "@NonNegative": 46,
      "@IndexFor": 44,
      "NO_ANNOTATION": 49,
      "@Positive": 79,
      "@SearchIndexFor": 24,
      "@LTLengthOf": 30
    }
  },
  "trivial_heuristic_performance": {
    "line_mod_heuristic": 0.4794007490636704,
    "random_assignment": 0.2209737827715356,
    "always_most_common": 0.6217228464419475
  },
  "model_results": {
    "DiscriminatingGBT": {
      "model": "DiscriminatingGBT",
      "accuracy": 0.7116104868913857,
      "f1_macro": 0.3144043831742665,
      "f1_weighted": 0.6261155528018397,
      "precision": 0.5626376400301236,
      "recall": 0.7116104868913857,
      "support": 267,
      "per_annotation_f1": {
        "@LTLengthOf": 0.0,
        "@IndexFor": 0.3,
        "NO_ANNOTATION": 0.8617886178861789,
        "@SearchIndexFor": 0.0,
        "@NonNegative": 0.0,
        "@Positive": 0.7246376811594203
      },
      "challenging_cases": {
        "complexity_accuracy": {
          "medium": 0.8490566037735849,
          "hard": 0.5405405405405406,
          "very_hard": 0.6153846153846154,
          "easy": 1.0
        },
        "failed_challenging_cases": [
          {
            "pattern": "substring_operation",
            "complexity": "hard",
            "expected": "@LTLengthOf",
            "predicted": "NO_ANNOTATION",
            "description": "Substring end position requiring @LTLengthOf",
            "code_snippet": "\npublic String getPrefix(String text, int endPos) {\n    return text.substring(0, endPos);  // endPos..."
          },
          {
            "pattern": "substring_operation",
            "complexity": "hard",
            "expected": "@LTLengthOf",
            "predicted": "@Positive",
            "description": "Substring end position requiring @LTLengthOf",
            "code_snippet": "\npublic String getPrefix(String text, int endPos) {\n    return text.substring(0, endPos);  // endPos..."
          },
          {
            "pattern": "substring_operation",
            "complexity": "hard",
            "expected": "@LTLengthOf",
            "predicted": "NO_ANNOTATION",
            "description": "Substring end position requiring @LTLengthOf",
            "code_snippet": "\npublic String getPrefix(String text, int endPos) {\n    return text.substring(0, endPos);  // endPos..."
          },
          {
            "pattern": "substring_operation",
            "complexity": "hard",
            "expected": "@LTLengthOf",
            "predicted": "@Positive",
            "description": "Substring end position requiring @LTLengthOf",
            "code_snippet": "\npublic String getPrefix(String text, int endPos) {\n    return text.substring(0, endPos);  // endPos..."
          },
          {
            "pattern": "misleading_index",
            "complexity": "very_hard",
            "expected": "NO_ANNOTATION",
            "predicted": "@Positive",
            "description": "Misleading case where index can be negative",
            "code_snippet": "\npublic int findLastOccurrence(List<String> items, String target) {\n    int lastIndex = -1;  // last..."
          }
        ],
        "total_challenging_failures": 69
      },
      "discriminating_score": 0.7416104868913858
    },
    "DiscriminatingHGT": {
      "model": "DiscriminatingHGT",
      "accuracy": 0.8164794007490637,
      "f1_macro": 0.5957562033739319,
      "f1_weighted": 0.7560614856017763,
      "precision": 0.7108659721906321,
      "recall": 0.8164794007490637,
      "support": 267,
      "per_annotation_f1": {
        "@LTLengthOf": 1.0,
        "@IndexFor": 0.0,
        "NO_ANNOTATION": 0.8808864265927978,
        "@SearchIndexFor": 0.0,
        "@NonNegative": 0.9,
        "@Positive": 0.7936507936507936
      },
      "challenging_cases": {
        "complexity_accuracy": {
          "medium": 0.8113207547169812,
          "hard": 0.7567567567567568,
          "very_hard": 0.7692307692307693,
          "easy": 1.0
        },
        "failed_challenging_cases": [
          {
            "pattern": "misleading_index",
            "complexity": "very_hard",
            "expected": "NO_ANNOTATION",
            "predicted": "@Positive",
            "description": "Misleading case where index can be negative",
            "code_snippet": "\npublic int findLastOccurrence(List<String> items, String target) {\n    int lastIndex = -1;  // last..."
          },
          {
            "pattern": "complex_indexing",
            "complexity": "very_hard",
            "expected": "@IndexFor",
            "predicted": "NO_ANNOTATION",
            "description": "Complex indexing with multiple constraints",
            "code_snippet": "\npublic void copyElements(int[] source, int[] dest, int startIndex, int count) {\n    for (int i = 0;..."
          },
          {
            "pattern": "complex_indexing",
            "complexity": "very_hard",
            "expected": "@IndexFor",
            "predicted": "NO_ANNOTATION",
            "description": "Complex indexing with multiple constraints",
            "code_snippet": "\npublic void copyElements(int[] source, int[] dest, int startIndex, int count) {\n    for (int i = 0;..."
          },
          {
            "pattern": "complex_indexing",
            "complexity": "very_hard",
            "expected": "@IndexFor",
            "predicted": "NO_ANNOTATION",
            "description": "Complex indexing with multiple constraints",
            "code_snippet": "\npublic void copyElements(int[] source, int[] dest, int startIndex, int count) {\n    for (int i = 0;..."
          },
          {
            "pattern": "complex_indexing",
            "complexity": "very_hard",
            "expected": "@IndexFor",
            "predicted": "NO_ANNOTATION",
            "description": "Complex indexing with multiple constraints",
            "code_snippet": "\npublic void copyElements(int[] source, int[] dest, int startIndex, int count) {\n    for (int i = 0;..."
          }
        ],
        "total_challenging_failures": 39
      },
      "discriminating_score": 0.9164794007490636
    },
    "DiscriminatingCausal": {
      "model": "DiscriminatingCausal",
      "accuracy": 0.7265917602996255,
      "f1_macro": 0.411400289178067,
      "f1_weighted": 0.6303192080969859,
      "precision": 0.5853822888753075,
      "recall": 0.7265917602996255,
      "support": 267,
      "per_annotation_f1": {
        "@LTLengthOf": 1.0,
        "@IndexFor": 0.0,
        "NO_ANNOTATION": 0.8197530864197531,
        "@SearchIndexFor": 0.0,
        "@NonNegative": 0.0,
        "@Positive": 0.6486486486486487
      },
      "challenging_cases": {
        "complexity_accuracy": {
          "medium": 0.49056603773584906,
          "hard": 0.7567567567567568,
          "very_hard": 0.6923076923076923,
          "easy": 1.0
        },
        "failed_challenging_cases": [
          {
            "pattern": "complex_indexing",
            "complexity": "very_hard",
            "expected": "@NonNegative",
            "predicted": "NO_ANNOTATION",
            "description": "Complex indexing with multiple constraints",
            "code_snippet": "\npublic void copyElements(int[] source, int[] dest, int startIndex, int count) {\n    for (int i = 0;..."
          },
          {
            "pattern": "complex_indexing",
            "complexity": "very_hard",
            "expected": "@IndexFor",
            "predicted": "NO_ANNOTATION",
            "description": "Complex indexing with multiple constraints",
            "code_snippet": "\npublic void copyElements(int[] source, int[] dest, int startIndex, int count) {\n    for (int i = 0;..."
          },
          {
            "pattern": "complex_indexing",
            "complexity": "very_hard",
            "expected": "@NonNegative",
            "predicted": "NO_ANNOTATION",
            "description": "Complex indexing with multiple constraints",
            "code_snippet": "\npublic void copyElements(int[] source, int[] dest, int startIndex, int count) {\n    for (int i = 0;..."
          },
          {
            "pattern": "complex_indexing",
            "complexity": "very_hard",
            "expected": "@IndexFor",
            "predicted": "NO_ANNOTATION",
            "description": "Complex indexing with multiple constraints",
            "code_snippet": "\npublic void copyElements(int[] source, int[] dest, int startIndex, int count) {\n    for (int i = 0;..."
          },
          {
            "pattern": "complex_indexing",
            "complexity": "very_hard",
            "expected": "@NonNegative",
            "predicted": "NO_ANNOTATION",
            "description": "Complex indexing with multiple constraints",
            "code_snippet": "\npublic void copyElements(int[] source, int[] dest, int startIndex, int count) {\n    for (int i = 0;..."
          }
        ],
        "total_challenging_failures": 46
      },
      "discriminating_score": 0.8265917602996254
    }
  },
  "evaluation_type": "Discriminating Power Assessment",
  "key_findings": [
    "\u26a0\ufe0f  Models may be relying on trivial patterns",
    "DiscriminatingGBT handles very hard cases well: 0.615",
    "DiscriminatingHGT handles very hard cases well: 0.769",
    "DiscriminatingCausal handles very hard cases well: 0.692"
  ]
}