{
  "method_name": "LessThanValue_slice",
  "java_file": null,
  "nodes": [
    {
      "id": 0,
      "label": "void subtyping(int x, int y, @LessThan({\"#1\", \"#2\"}) int a, @LessThan(\"#1\") int b) {",
      "line": 1,
      "node_type": "stmt"
    },
    {
      "id": 1,
      "label": "@LessThan(\"x\") int q = a;",
      "line": 2,
      "node_type": "stmt"
    },
    {
      "id": 2,
      "label": "@LessThan({\"x\", \"y\"})",
      "line": 3,
      "node_type": "stmt"
    },
    {
      "id": 3,
      "label": "// :: error: (assignment)",
      "line": 4,
      "node_type": "stmt"
    },
    {
      "id": 4,
      "label": "int r = b;",
      "line": 5,
      "node_type": "stmt"
    },
    {
      "id": 5,
      "label": "}",
      "line": 6,
      "node_type": "stmt"
    },
    {
      "id": 6,
      "label": "",
      "line": 7,
      "node_type": "stmt"
    },
    {
      "id": 7,
      "label": "public static boolean flag;",
      "line": 8,
      "node_type": "stmt"
    },
    {
      "id": 8,
      "label": "",
      "line": 9,
      "node_type": "stmt"
    },
    {
      "id": 9,
      "label": "void lub(int x, int y, @LessThan({\"#1\", \"#2\"}) int a, @LessThan(\"#1\") int b) {",
      "line": 10,
      "node_type": "stmt"
    },
    {
      "id": 10,
      "label": "@LessThan(\"x\") int r = flag ? a : b;",
      "line": 11,
      "node_type": "stmt"
    },
    {
      "id": 11,
      "label": "@LessThan({\"x\", \"y\"})",
      "line": 12,
      "node_type": "stmt"
    },
    {
      "id": 12,
      "label": "// :: error: (assignment)",
      "line": 13,
      "node_type": "stmt"
    },
    {
      "id": 13,
      "label": "int s = flag ? a : b;",
      "line": 14,
      "node_type": "stmt"
    },
    {
      "id": 14,
      "label": "}",
      "line": 15,
      "node_type": "stmt"
    },
    {
      "id": 15,
      "label": "",
      "line": 16,
      "node_type": "stmt"
    },
    {
      "id": 16,
      "label": "void transitive(int a, int b, int c) {",
      "line": 17,
      "node_type": "stmt"
    },
    {
      "id": 17,
      "label": "if (a < b) {",
      "line": 18,
      "node_type": "stmt"
    },
    {
      "id": 18,
      "label": "if (b < c) {",
      "line": 19,
      "node_type": "stmt"
    },
    {
      "id": 19,
      "label": "// :: error: (assignment)",
      "line": 20,
      "node_type": "stmt"
    },
    {
      "id": 20,
      "label": "@LessThan(\"c\") int x = a;",
      "line": 21,
      "node_type": "stmt"
    },
    {
      "id": 21,
      "label": "}",
      "line": 22,
      "node_type": "stmt"
    },
    {
      "id": 22,
      "label": "}",
      "line": 23,
      "node_type": "stmt"
    },
    {
      "id": 23,
      "label": "}",
      "line": 24,
      "node_type": "stmt"
    },
    {
      "id": 24,
      "label": "",
      "line": 25,
      "node_type": "stmt"
    },
    {
      "id": 25,
      "label": "void calls() {",
      "line": 26,
      "node_type": "stmt"
    },
    {
      "id": 26,
      "label": "isLessThan(0, 1);",
      "line": 27,
      "node_type": "stmt"
    },
    {
      "id": 27,
      "label": "isLessThanOrEqual(0, 0);",
      "line": 28,
      "node_type": "stmt"
    },
    {
      "id": 28,
      "label": "}",
      "line": 29,
      "node_type": "stmt"
    },
    {
      "id": 29,
      "label": "",
      "line": 30,
      "node_type": "stmt"
    },
    {
      "id": 30,
      "label": "void isLessThan(@LessThan(\"#2\") @NonNegative int start, int end) {",
      "line": 31,
      "node_type": "stmt"
    },
    {
      "id": 31,
      "label": "@NonNegative int x = end - start - 1;",
      "line": 32,
      "node_type": "stmt"
    },
    {
      "id": 32,
      "label": "@Positive int y = end - start;",
      "line": 33,
      "node_type": "stmt"
    },
    {
      "id": 33,
      "label": "}",
      "line": 34,
      "node_type": "stmt"
    },
    {
      "id": 34,
      "label": "",
      "line": 35,
      "node_type": "stmt"
    },
    {
      "id": 35,
      "label": "@NonNegative int isLessThanOrEqual(@LessThan(\"#2 + 1\") @NonNegative int start, int end) {",
      "line": 36,
      "node_type": "stmt"
    },
    {
      "id": 36,
      "label": "return end - start;",
      "line": 37,
      "node_type": "stmt"
    },
    {
      "id": 37,
      "label": "}",
      "line": 38,
      "node_type": "stmt"
    },
    {
      "id": 38,
      "label": "",
      "line": 39,
      "node_type": "stmt"
    },
    {
      "id": 39,
      "label": "public void setMaximumItemCount(int maximum) {",
      "line": 40,
      "node_type": "stmt"
    },
    {
      "id": 40,
      "label": "if (maximum < 0) {",
      "line": 41,
      "node_type": "stmt"
    },
    {
      "id": 41,
      "label": "throw new IllegalArgumentException(\"Negative 'maximum' argument.\");",
      "line": 42,
      "node_type": "stmt"
    },
    {
      "id": 42,
      "label": "}",
      "line": 43,
      "node_type": "stmt"
    },
    {
      "id": 43,
      "label": "int count = getCount();",
      "line": 44,
      "node_type": "stmt"
    },
    {
      "id": 44,
      "label": "if (count > maximum) {",
      "line": 45,
      "node_type": "stmt"
    },
    {
      "id": 45,
      "label": "@Positive int y = count - maximum;",
      "line": 46,
      "node_type": "stmt"
    },
    {
      "id": 46,
      "label": "@NonNegative int deleteIndex = count - maximum - 1;",
      "line": 47,
      "node_type": "stmt"
    },
    {
      "id": 47,
      "label": "}",
      "line": 48,
      "node_type": "stmt"
    },
    {
      "id": 48,
      "label": "}",
      "line": 49,
      "node_type": "stmt"
    },
    {
      "id": 49,
      "label": "",
      "line": 50,
      "node_type": "stmt"
    },
    {
      "id": 50,
      "label": "int getCount() {",
      "line": 51,
      "node_type": "stmt"
    },
    {
      "id": 51,
      "label": "throw new RuntimeException();",
      "line": 52,
      "node_type": "stmt"
    },
    {
      "id": 52,
      "label": "}",
      "line": 53,
      "node_type": "stmt"
    },
    {
      "id": 53,
      "label": "",
      "line": 54,
      "node_type": "stmt"
    },
    {
      "id": 54,
      "label": "void method(@NonNegative int m) {",
      "line": 55,
      "node_type": "stmt"
    },
    {
      "id": 55,
      "label": "boolean[] has_modulus = new boolean[m];",
      "line": 56,
      "node_type": "stmt"
    },
    {
      "id": 56,
      "label": "@LessThan(\"m\") int x = foo(m);",
      "line": 57,
      "node_type": "stmt"
    },
    {
      "id": 57,
      "label": "@IndexFor(\"has_modulus\") int rem = foo(m);",
      "line": 58,
      "node_type": "stmt"
    },
    {
      "id": 58,
      "label": "}",
      "line": 59,
      "node_type": "stmt"
    },
    {
      "id": 59,
      "label": "",
      "line": 60,
      "node_type": "stmt"
    },
    {
      "id": 60,
      "label": "@LessThan(\"#1\") @NonNegative int foo(int in) {",
      "line": 61,
      "node_type": "stmt"
    },
    {
      "id": 61,
      "label": "throw new RuntimeException();",
      "line": 62,
      "node_type": "stmt"
    },
    {
      "id": 62,
      "label": "}",
      "line": 63,
      "node_type": "stmt"
    },
    {
      "id": 63,
      "label": "",
      "line": 64,
      "node_type": "stmt"
    },
    {
      "id": 64,
      "label": "void test(int maximum, int count) {",
      "line": 65,
      "node_type": "stmt"
    },
    {
      "id": 65,
      "label": "if (maximum < 0) {",
      "line": 66,
      "node_type": "stmt"
    },
    {
      "id": 66,
      "label": "throw new IllegalArgumentException(\"Negative 'maximum' argument.\");",
      "line": 67,
      "node_type": "stmt"
    },
    {
      "id": 67,
      "label": "}",
      "line": 68,
      "node_type": "stmt"
    },
    {
      "id": 68,
      "label": "if (count > maximum) {",
      "line": 69,
      "node_type": "stmt"
    },
    {
      "id": 69,
      "label": "int deleteIndex = count - maximum - 1;",
      "line": 70,
      "node_type": "stmt"
    },
    {
      "id": 70,
      "label": "// TODO: shouldn't error",
      "line": 71,
      "node_type": "stmt"
    },
    {
      "id": 71,
      "label": "// :: error: (argument)",
      "line": 72,
      "node_type": "stmt"
    },
    {
      "id": 72,
      "label": "isLessThanOrEqual(0, deleteIndex);",
      "line": 73,
      "node_type": "stmt"
    },
    {
      "id": 73,
      "label": "}",
      "line": 74,
      "node_type": "stmt"
    },
    {
      "id": 74,
      "label": "}",
      "line": 75,
      "node_type": "stmt"
    },
    {
      "id": 75,
      "label": "",
      "line": 76,
      "node_type": "stmt"
    },
    {
      "id": 76,
      "label": "void count(int count) {",
      "line": 77,
      "node_type": "stmt"
    },
    {
      "id": 77,
      "label": "if (count > 0) {",
      "line": 78,
      "node_type": "stmt"
    },
    {
      "id": 78,
      "label": "if (count % 2 == 1) {",
      "line": 79,
      "node_type": "stmt"
    },
    {
      "id": 79,
      "label": "",
      "line": 80,
      "node_type": "stmt"
    },
    {
      "id": 80,
      "label": "} else {",
      "line": 81,
      "node_type": "stmt"
    },
    {
      "id": 81,
      "label": "// TODO: improve value checker",
      "line": 82,
      "node_type": "stmt"
    },
    {
      "id": 82,
      "label": "// :: error: (assignment)",
      "line": 83,
      "node_type": "stmt"
    },
    {
      "id": 83,
      "label": "@IntRange(from = 0) int countDivMinus = count / 2 - 1;",
      "line": 84,
      "node_type": "stmt"
    },
    {
      "id": 84,
      "label": "// Reasign to update the value in the store.",
      "line": 85,
      "node_type": "stmt"
    },
    {
      "id": 85,
      "label": "countDivMinus = countDivMinus;",
      "line": 86,
      "node_type": "stmt"
    },
    {
      "id": 86,
      "label": "// :: error: (argument)",
      "line": 87,
      "node_type": "stmt"
    },
    {
      "id": 87,
      "label": "isLessThan(0, countDivMinus);",
      "line": 88,
      "node_type": "stmt"
    },
    {
      "id": 88,
      "label": "isLessThanOrEqual(0, countDivMinus);",
      "line": 89,
      "node_type": "stmt"
    },
    {
      "id": 89,
      "label": "}",
      "line": 90,
      "node_type": "stmt"
    },
    {
      "id": 90,
      "label": "}",
      "line": 91,
      "node_type": "stmt"
    },
    {
      "id": 91,
      "label": "}",
      "line": 92,
      "node_type": "stmt"
    },
    {
      "id": 92,
      "label": "",
      "line": 93,
      "node_type": "stmt"
    },
    {
      "id": 93,
      "label": "static @NonNegative @LessThan(\"#2 + 1\") int expandedCapacity(",
      "line": 94,
      "node_type": "stmt"
    },
    {
      "id": 94,
      "label": "@NonNegative int oldCapacity, @NonNegative int minCapacity) {",
      "line": 95,
      "node_type": "stmt"
    },
    {
      "id": 95,
      "label": "if (minCapacity < 0) {",
      "line": 96,
      "node_type": "stmt"
    },
    {
      "id": 96,
      "label": "throw new AssertionError(\"cannot store more than MAX_VALUE elements\");",
      "line": 97,
      "node_type": "stmt"
    },
    {
      "id": 97,
      "label": "}",
      "line": 98,
      "node_type": "stmt"
    },
    {
      "id": 98,
      "label": "// careful of overflow!",
      "line": 99,
      "node_type": "stmt"
    },
    {
      "id": 99,
      "label": "int newCapacity = oldCapacity + (oldCapacity >> 1) + 1; // expand by %50",
      "line": 100,
      "node_type": "stmt"
    },
    {
      "id": 100,
      "label": "if (newCapacity < minCapacity) {",
      "line": 101,
      "node_type": "stmt"
    },
    {
      "id": 101,
      "label": "newCapacity = Integer.highestOneBit(minCapacity - 1) << 1;",
      "line": 102,
      "node_type": "stmt"
    },
    {
      "id": 102,
      "label": "}",
      "line": 103,
      "node_type": "stmt"
    },
    {
      "id": 103,
      "label": "if (newCapacity < 0) {",
      "line": 104,
      "node_type": "stmt"
    },
    {
      "id": 104,
      "label": "newCapacity = Integer.MAX_VALUE;",
      "line": 105,
      "node_type": "stmt"
    },
    {
      "id": 105,
      "label": "// guaranteed to be >= newCapacity",
      "line": 106,
      "node_type": "stmt"
    },
    {
      "id": 106,
      "label": "}",
      "line": 107,
      "node_type": "stmt"
    },
    {
      "id": 107,
      "label": "// :: error: (return)",
      "line": 108,
      "node_type": "stmt"
    },
    {
      "id": 108,
      "label": "return newCapacity;",
      "line": 109,
      "node_type": "stmt"
    },
    {
      "id": 109,
      "label": "}",
      "line": 110,
      "node_type": "stmt"
    }
  ],
  "edges": [
    {
      "source": 0,
      "target": 1
    },
    {
      "source": 0,
      "target": 1,
      "variable": "LessThan"
    },
    {
      "source": 0,
      "target": 1,
      "variable": "x"
    },
    {
      "source": 0,
      "target": 1,
      "variable": "int"
    },
    {
      "source": 0,
      "target": 1,
      "variable": "a"
    },
    {
      "source": 0,
      "target": 2,
      "variable": "y"
    },
    {
      "source": 0,
      "target": 4,
      "variable": "b"
    },
    {
      "source": 0,
      "target": 9,
      "variable": "void"
    },
    {
      "source": 1,
      "target": 2
    },
    {
      "source": 1,
      "target": 2,
      "variable": "LessThan"
    },
    {
      "source": 1,
      "target": 2,
      "variable": "x"
    },
    {
      "source": 1,
      "target": 4,
      "variable": "int"
    },
    {
      "source": 1,
      "target": 9,
      "variable": "a"
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 2,
      "target": 9,
      "variable": "x"
    },
    {
      "source": 2,
      "target": 9,
      "variable": "y"
    },
    {
      "source": 2,
      "target": 9,
      "variable": "LessThan"
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 3,
      "target": 12,
      "variable": "error"
    },
    {
      "source": 3,
      "target": 12,
      "variable": "assignment"
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 4,
      "target": 9,
      "variable": "int"
    },
    {
      "source": 4,
      "target": 9,
      "variable": "b"
    },
    {
      "source": 4,
      "target": 10,
      "variable": "r"
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 7,
      "target": 10,
      "variable": "flag"
    },
    {
      "source": 7,
      "target": 39,
      "variable": "public"
    },
    {
      "source": 7,
      "target": 55,
      "variable": "boolean"
    },
    {
      "source": 7,
      "target": 93,
      "variable": "static"
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 9,
      "target": 10,
      "variable": "LessThan"
    },
    {
      "source": 9,
      "target": 10,
      "variable": "x"
    },
    {
      "source": 9,
      "target": 10,
      "variable": "int"
    },
    {
      "source": 9,
      "target": 10,
      "variable": "a"
    },
    {
      "source": 9,
      "target": 10,
      "variable": "b"
    },
    {
      "source": 9,
      "target": 11,
      "variable": "y"
    },
    {
      "source": 9,
      "target": 16,
      "variable": "void"
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 10,
      "target": 11,
      "variable": "LessThan"
    },
    {
      "source": 10,
      "target": 11,
      "variable": "x"
    },
    {
      "source": 10,
      "target": 13,
      "variable": "int"
    },
    {
      "source": 10,
      "target": 13,
      "variable": "flag"
    },
    {
      "source": 10,
      "target": 13,
      "variable": "a"
    },
    {
      "source": 10,
      "target": 13,
      "variable": "b"
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 11,
      "target": 20,
      "variable": "LessThan"
    },
    {
      "source": 11,
      "target": 20,
      "variable": "x"
    },
    {
      "source": 11,
      "target": 32,
      "variable": "y"
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 12,
      "target": 19,
      "variable": "error"
    },
    {
      "source": 12,
      "target": 19,
      "variable": "assignment"
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 13,
      "target": 16,
      "variable": "int"
    },
    {
      "source": 13,
      "target": 16,
      "variable": "a"
    },
    {
      "source": 13,
      "target": 16,
      "variable": "b"
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 16,
      "target": 17
    },
    {
      "source": 16,
      "target": 17,
      "variable": "a"
    },
    {
      "source": 16,
      "target": 17,
      "variable": "b"
    },
    {
      "source": 16,
      "target": 18,
      "variable": "c"
    },
    {
      "source": 16,
      "target": 20,
      "variable": "int"
    },
    {
      "source": 16,
      "target": 25,
      "variable": "void"
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 17,
      "target": 18,
      "variable": "if"
    },
    {
      "source": 17,
      "target": 18,
      "variable": "b"
    },
    {
      "source": 17,
      "target": 20,
      "variable": "a"
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 18,
      "target": 20,
      "variable": "c"
    },
    {
      "source": 18,
      "target": 40,
      "variable": "if"
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 19,
      "target": 70,
      "variable": "error"
    },
    {
      "source": 19,
      "target": 82,
      "variable": "assignment"
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 20,
      "target": 30,
      "variable": "LessThan"
    },
    {
      "source": 20,
      "target": 30,
      "variable": "int"
    },
    {
      "source": 20,
      "target": 31,
      "variable": "x"
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 23,
      "target": 24
    },
    {
      "source": 24,
      "target": 25
    },
    {
      "source": 25,
      "target": 26
    },
    {
      "source": 25,
      "target": 30,
      "variable": "void"
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 26,
      "target": 30,
      "variable": "isLessThan"
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 27,
      "target": 35,
      "variable": "isLessThanOrEqual"
    },
    {
      "source": 28,
      "target": 29
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 30,
      "target": 31
    },
    {
      "source": 30,
      "target": 31,
      "variable": "NonNegative"
    },
    {
      "source": 30,
      "target": 31,
      "variable": "int"
    },
    {
      "source": 30,
      "target": 31,
      "variable": "end"
    },
    {
      "source": 30,
      "target": 31,
      "variable": "start"
    },
    {
      "source": 30,
      "target": 35,
      "variable": "LessThan"
    },
    {
      "source": 30,
      "target": 39,
      "variable": "void"
    },
    {
      "source": 30,
      "target": 87,
      "variable": "isLessThan"
    },
    {
      "source": 31,
      "target": 32
    },
    {
      "source": 31,
      "target": 32,
      "variable": "int"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "end"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "start"
    },
    {
      "source": 31,
      "target": 35,
      "variable": "NonNegative"
    },
    {
      "source": 31,
      "target": 56,
      "variable": "x"
    },
    {
      "source": 32,
      "target": 33
    },
    {
      "source": 32,
      "target": 35,
      "variable": "int"
    },
    {
      "source": 32,
      "target": 35,
      "variable": "start"
    },
    {
      "source": 32,
      "target": 35,
      "variable": "end"
    },
    {
      "source": 32,
      "target": 45,
      "variable": "Positive"
    },
    {
      "source": 32,
      "target": 45,
      "variable": "y"
    },
    {
      "source": 33,
      "target": 34
    },
    {
      "source": 34,
      "target": 35
    },
    {
      "source": 35,
      "target": 36
    },
    {
      "source": 35,
      "target": 36,
      "variable": "end"
    },
    {
      "source": 35,
      "target": 36,
      "variable": "start"
    },
    {
      "source": 35,
      "target": 39,
      "variable": "int"
    },
    {
      "source": 35,
      "target": 46,
      "variable": "NonNegative"
    },
    {
      "source": 35,
      "target": 56,
      "variable": "LessThan"
    },
    {
      "source": 35,
      "target": 72,
      "variable": "isLessThanOrEqual"
    },
    {
      "source": 36,
      "target": 37
    },
    {
      "source": 36,
      "target": 107,
      "variable": "return"
    },
    {
      "source": 37,
      "target": 38
    },
    {
      "source": 38,
      "target": 39
    },
    {
      "source": 39,
      "target": 40
    },
    {
      "source": 39,
      "target": 40,
      "variable": "maximum"
    },
    {
      "source": 39,
      "target": 43,
      "variable": "int"
    },
    {
      "source": 39,
      "target": 54,
      "variable": "void"
    },
    {
      "source": 40,
      "target": 41
    },
    {
      "source": 40,
      "target": 41,
      "variable": "maximum"
    },
    {
      "source": 40,
      "target": 44,
      "variable": "if"
    },
    {
      "source": 41,
      "target": 42
    },
    {
      "source": 41,
      "target": 44,
      "variable": "maximum"
    },
    {
      "source": 41,
      "target": 51,
      "variable": "throw"
    },
    {
      "source": 41,
      "target": 51,
      "variable": "new"
    },
    {
      "source": 41,
      "target": 66,
      "variable": "IllegalArgumentException"
    },
    {
      "source": 41,
      "target": 66,
      "variable": "Negative"
    },
    {
      "source": 41,
      "target": 66,
      "variable": "argument"
    },
    {
      "source": 42,
      "target": 43
    },
    {
      "source": 43,
      "target": 44
    },
    {
      "source": 43,
      "target": 44,
      "variable": "count"
    },
    {
      "source": 43,
      "target": 45,
      "variable": "int"
    },
    {
      "source": 43,
      "target": 50,
      "variable": "getCount"
    },
    {
      "source": 44,
      "target": 45
    },
    {
      "source": 44,
      "target": 45,
      "variable": "count"
    },
    {
      "source": 44,
      "target": 45,
      "variable": "maximum"
    },
    {
      "source": 44,
      "target": 65,
      "variable": "if"
    },
    {
      "source": 45,
      "target": 46
    },
    {
      "source": 45,
      "target": 46,
      "variable": "int"
    },
    {
      "source": 45,
      "target": 46,
      "variable": "count"
    },
    {
      "source": 45,
      "target": 46,
      "variable": "maximum"
    },
    {
      "source": 46,
      "target": 47
    },
    {
      "source": 46,
      "target": 50,
      "variable": "int"
    },
    {
      "source": 46,
      "target": 54,
      "variable": "NonNegative"
    },
    {
      "source": 46,
      "target": 64,
      "variable": "maximum"
    },
    {
      "source": 46,
      "target": 64,
      "variable": "count"
    },
    {
      "source": 46,
      "target": 69,
      "variable": "deleteIndex"
    },
    {
      "source": 47,
      "target": 48
    },
    {
      "source": 48,
      "target": 49
    },
    {
      "source": 49,
      "target": 50
    },
    {
      "source": 50,
      "target": 51
    },
    {
      "source": 50,
      "target": 54,
      "variable": "int"
    },
    {
      "source": 51,
      "target": 52
    },
    {
      "source": 51,
      "target": 55,
      "variable": "new"
    },
    {
      "source": 51,
      "target": 61,
      "variable": "throw"
    },
    {
      "source": 51,
      "target": 61,
      "variable": "RuntimeException"
    },
    {
      "source": 52,
      "target": 53
    },
    {
      "source": 53,
      "target": 54
    },
    {
      "source": 54,
      "target": 55
    },
    {
      "source": 54,
      "target": 55,
      "variable": "m"
    },
    {
      "source": 54,
      "target": 56,
      "variable": "int"
    },
    {
      "source": 54,
      "target": 60,
      "variable": "NonNegative"
    },
    {
      "source": 54,
      "target": 64,
      "variable": "void"
    },
    {
      "source": 55,
      "target": 56
    },
    {
      "source": 55,
      "target": 56,
      "variable": "m"
    },
    {
      "source": 55,
      "target": 57,
      "variable": "has_modulus"
    },
    {
      "source": 55,
      "target": 61,
      "variable": "new"
    },
    {
      "source": 56,
      "target": 57
    },
    {
      "source": 56,
      "target": 57,
      "variable": "int"
    },
    {
      "source": 56,
      "target": 57,
      "variable": "foo"
    },
    {
      "source": 56,
      "target": 57,
      "variable": "m"
    },
    {
      "source": 56,
      "target": 60,
      "variable": "LessThan"
    },
    {
      "source": 57,
      "target": 58
    },
    {
      "source": 57,
      "target": 60,
      "variable": "int"
    },
    {
      "source": 57,
      "target": 60,
      "variable": "foo"
    },
    {
      "source": 58,
      "target": 59
    },
    {
      "source": 59,
      "target": 60
    },
    {
      "source": 60,
      "target": 61
    },
    {
      "source": 60,
      "target": 64,
      "variable": "int"
    },
    {
      "source": 60,
      "target": 84,
      "variable": "in"
    },
    {
      "source": 60,
      "target": 93,
      "variable": "NonNegative"
    },
    {
      "source": 60,
      "target": 93,
      "variable": "LessThan"
    },
    {
      "source": 61,
      "target": 62
    },
    {
      "source": 61,
      "target": 66,
      "variable": "throw"
    },
    {
      "source": 61,
      "target": 66,
      "variable": "new"
    },
    {
      "source": 62,
      "target": 63
    },
    {
      "source": 63,
      "target": 64
    },
    {
      "source": 64,
      "target": 65
    },
    {
      "source": 64,
      "target": 65,
      "variable": "maximum"
    },
    {
      "source": 64,
      "target": 68,
      "variable": "count"
    },
    {
      "source": 64,
      "target": 69,
      "variable": "int"
    },
    {
      "source": 64,
      "target": 76,
      "variable": "void"
    },
    {
      "source": 65,
      "target": 66
    },
    {
      "source": 65,
      "target": 66,
      "variable": "maximum"
    },
    {
      "source": 65,
      "target": 68,
      "variable": "if"
    },
    {
      "source": 66,
      "target": 67
    },
    {
      "source": 66,
      "target": 68,
      "variable": "maximum"
    },
    {
      "source": 66,
      "target": 71,
      "variable": "argument"
    },
    {
      "source": 66,
      "target": 96,
      "variable": "throw"
    },
    {
      "source": 66,
      "target": 96,
      "variable": "new"
    },
    {
      "source": 67,
      "target": 68
    },
    {
      "source": 68,
      "target": 69
    },
    {
      "source": 68,
      "target": 69,
      "variable": "count"
    },
    {
      "source": 68,
      "target": 69,
      "variable": "maximum"
    },
    {
      "source": 68,
      "target": 77,
      "variable": "if"
    },
    {
      "source": 69,
      "target": 70
    },
    {
      "source": 69,
      "target": 72,
      "variable": "deleteIndex"
    },
    {
      "source": 69,
      "target": 76,
      "variable": "count"
    },
    {
      "source": 69,
      "target": 76,
      "variable": "int"
    },
    {
      "source": 70,
      "target": 71
    },
    {
      "source": 70,
      "target": 71,
      "variable": "error"
    },
    {
      "source": 70,
      "target": 81,
      "variable": "TODO"
    },
    {
      "source": 71,
      "target": 72
    },
    {
      "source": 71,
      "target": 82,
      "variable": "error"
    },
    {
      "source": 71,
      "target": 86,
      "variable": "argument"
    },
    {
      "source": 72,
      "target": 73
    },
    {
      "source": 72,
      "target": 88,
      "variable": "isLessThanOrEqual"
    },
    {
      "source": 73,
      "target": 74
    },
    {
      "source": 74,
      "target": 75
    },
    {
      "source": 75,
      "target": 76
    },
    {
      "source": 76,
      "target": 77
    },
    {
      "source": 76,
      "target": 77,
      "variable": "count"
    },
    {
      "source": 76,
      "target": 83,
      "variable": "int"
    },
    {
      "source": 77,
      "target": 78
    },
    {
      "source": 77,
      "target": 78,
      "variable": "if"
    },
    {
      "source": 77,
      "target": 78,
      "variable": "count"
    },
    {
      "source": 78,
      "target": 79
    },
    {
      "source": 78,
      "target": 83,
      "variable": "count"
    },
    {
      "source": 78,
      "target": 95,
      "variable": "if"
    },
    {
      "source": 79,
      "target": 80
    },
    {
      "source": 80,
      "target": 81
    },
    {
      "source": 81,
      "target": 82
    },
    {
      "source": 81,
      "target": 84,
      "variable": "value"
    },
    {
      "source": 82,
      "target": 83
    },
    {
      "source": 82,
      "target": 86,
      "variable": "error"
    },
    {
      "source": 83,
      "target": 84
    },
    {
      "source": 83,
      "target": 85,
      "variable": "countDivMinus"
    },
    {
      "source": 83,
      "target": 93,
      "variable": "int"
    },
    {
      "source": 84,
      "target": 85
    },
    {
      "source": 84,
      "target": 96,
      "variable": "store"
    },
    {
      "source": 84,
      "target": 105,
      "variable": "to"
    },
    {
      "source": 85,
      "target": 86
    },
    {
      "source": 85,
      "target": 87,
      "variable": "countDivMinus"
    },
    {
      "source": 86,
      "target": 87
    },
    {
      "source": 86,
      "target": 107,
      "variable": "error"
    },
    {
      "source": 87,
      "target": 88
    },
    {
      "source": 87,
      "target": 88,
      "variable": "countDivMinus"
    },
    {
      "source": 88,
      "target": 89
    },
    {
      "source": 89,
      "target": 90
    },
    {
      "source": 90,
      "target": 91
    },
    {
      "source": 91,
      "target": 92
    },
    {
      "source": 92,
      "target": 93
    },
    {
      "source": 93,
      "target": 94
    },
    {
      "source": 93,
      "target": 94,
      "variable": "NonNegative"
    },
    {
      "source": 93,
      "target": 94,
      "variable": "int"
    },
    {
      "source": 94,
      "target": 95
    },
    {
      "source": 94,
      "target": 95,
      "variable": "minCapacity"
    },
    {
      "source": 94,
      "target": 99,
      "variable": "int"
    },
    {
      "source": 94,
      "target": 99,
      "variable": "oldCapacity"
    },
    {
      "source": 95,
      "target": 96
    },
    {
      "source": 95,
      "target": 100,
      "variable": "if"
    },
    {
      "source": 95,
      "target": 100,
      "variable": "minCapacity"
    },
    {
      "source": 96,
      "target": 97
    },
    {
      "source": 96,
      "target": 104,
      "variable": "MAX_VALUE"
    },
    {
      "source": 97,
      "target": 98
    },
    {
      "source": 98,
      "target": 99
    },
    {
      "source": 99,
      "target": 100
    },
    {
      "source": 99,
      "target": 100,
      "variable": "newCapacity"
    },
    {
      "source": 100,
      "target": 101
    },
    {
      "source": 100,
      "target": 101,
      "variable": "newCapacity"
    },
    {
      "source": 100,
      "target": 101,
      "variable": "minCapacity"
    },
    {
      "source": 100,
      "target": 103,
      "variable": "if"
    },
    {
      "source": 101,
      "target": 102
    },
    {
      "source": 101,
      "target": 103,
      "variable": "newCapacity"
    },
    {
      "source": 101,
      "target": 104,
      "variable": "Integer"
    },
    {
      "source": 102,
      "target": 103
    },
    {
      "source": 103,
      "target": 104
    },
    {
      "source": 103,
      "target": 104,
      "variable": "newCapacity"
    },
    {
      "source": 104,
      "target": 105
    },
    {
      "source": 104,
      "target": 105,
      "variable": "newCapacity"
    },
    {
      "source": 105,
      "target": 106
    },
    {
      "source": 105,
      "target": 108,
      "variable": "newCapacity"
    },
    {
      "source": 106,
      "target": 107
    },
    {
      "source": 107,
      "target": 108
    },
    {
      "source": 107,
      "target": 108,
      "variable": "return"
    },
    {
      "source": 108,
      "target": 109
    }
  ],
  "control_edges": [
    {
      "source": 0,
      "target": 1
    },
    {
      "source": 1,
      "target": 2
    },
    {
      "source": 2,
      "target": 3
    },
    {
      "source": 3,
      "target": 4
    },
    {
      "source": 4,
      "target": 5
    },
    {
      "source": 5,
      "target": 6
    },
    {
      "source": 6,
      "target": 7
    },
    {
      "source": 7,
      "target": 8
    },
    {
      "source": 8,
      "target": 9
    },
    {
      "source": 9,
      "target": 10
    },
    {
      "source": 10,
      "target": 11
    },
    {
      "source": 11,
      "target": 12
    },
    {
      "source": 12,
      "target": 13
    },
    {
      "source": 13,
      "target": 14
    },
    {
      "source": 14,
      "target": 15
    },
    {
      "source": 15,
      "target": 16
    },
    {
      "source": 16,
      "target": 17
    },
    {
      "source": 17,
      "target": 18
    },
    {
      "source": 18,
      "target": 19
    },
    {
      "source": 19,
      "target": 20
    },
    {
      "source": 20,
      "target": 21
    },
    {
      "source": 21,
      "target": 22
    },
    {
      "source": 22,
      "target": 23
    },
    {
      "source": 23,
      "target": 24
    },
    {
      "source": 24,
      "target": 25
    },
    {
      "source": 25,
      "target": 26
    },
    {
      "source": 26,
      "target": 27
    },
    {
      "source": 27,
      "target": 28
    },
    {
      "source": 28,
      "target": 29
    },
    {
      "source": 29,
      "target": 30
    },
    {
      "source": 30,
      "target": 31
    },
    {
      "source": 31,
      "target": 32
    },
    {
      "source": 32,
      "target": 33
    },
    {
      "source": 33,
      "target": 34
    },
    {
      "source": 34,
      "target": 35
    },
    {
      "source": 35,
      "target": 36
    },
    {
      "source": 36,
      "target": 37
    },
    {
      "source": 37,
      "target": 38
    },
    {
      "source": 38,
      "target": 39
    },
    {
      "source": 39,
      "target": 40
    },
    {
      "source": 40,
      "target": 41
    },
    {
      "source": 41,
      "target": 42
    },
    {
      "source": 42,
      "target": 43
    },
    {
      "source": 43,
      "target": 44
    },
    {
      "source": 44,
      "target": 45
    },
    {
      "source": 45,
      "target": 46
    },
    {
      "source": 46,
      "target": 47
    },
    {
      "source": 47,
      "target": 48
    },
    {
      "source": 48,
      "target": 49
    },
    {
      "source": 49,
      "target": 50
    },
    {
      "source": 50,
      "target": 51
    },
    {
      "source": 51,
      "target": 52
    },
    {
      "source": 52,
      "target": 53
    },
    {
      "source": 53,
      "target": 54
    },
    {
      "source": 54,
      "target": 55
    },
    {
      "source": 55,
      "target": 56
    },
    {
      "source": 56,
      "target": 57
    },
    {
      "source": 57,
      "target": 58
    },
    {
      "source": 58,
      "target": 59
    },
    {
      "source": 59,
      "target": 60
    },
    {
      "source": 60,
      "target": 61
    },
    {
      "source": 61,
      "target": 62
    },
    {
      "source": 62,
      "target": 63
    },
    {
      "source": 63,
      "target": 64
    },
    {
      "source": 64,
      "target": 65
    },
    {
      "source": 65,
      "target": 66
    },
    {
      "source": 66,
      "target": 67
    },
    {
      "source": 67,
      "target": 68
    },
    {
      "source": 68,
      "target": 69
    },
    {
      "source": 69,
      "target": 70
    },
    {
      "source": 70,
      "target": 71
    },
    {
      "source": 71,
      "target": 72
    },
    {
      "source": 72,
      "target": 73
    },
    {
      "source": 73,
      "target": 74
    },
    {
      "source": 74,
      "target": 75
    },
    {
      "source": 75,
      "target": 76
    },
    {
      "source": 76,
      "target": 77
    },
    {
      "source": 77,
      "target": 78
    },
    {
      "source": 78,
      "target": 79
    },
    {
      "source": 79,
      "target": 80
    },
    {
      "source": 80,
      "target": 81
    },
    {
      "source": 81,
      "target": 82
    },
    {
      "source": 82,
      "target": 83
    },
    {
      "source": 83,
      "target": 84
    },
    {
      "source": 84,
      "target": 85
    },
    {
      "source": 85,
      "target": 86
    },
    {
      "source": 86,
      "target": 87
    },
    {
      "source": 87,
      "target": 88
    },
    {
      "source": 88,
      "target": 89
    },
    {
      "source": 89,
      "target": 90
    },
    {
      "source": 90,
      "target": 91
    },
    {
      "source": 91,
      "target": 92
    },
    {
      "source": 92,
      "target": 93
    },
    {
      "source": 93,
      "target": 94
    },
    {
      "source": 94,
      "target": 95
    },
    {
      "source": 95,
      "target": 96
    },
    {
      "source": 96,
      "target": 97
    },
    {
      "source": 97,
      "target": 98
    },
    {
      "source": 98,
      "target": 99
    },
    {
      "source": 99,
      "target": 100
    },
    {
      "source": 100,
      "target": 101
    },
    {
      "source": 101,
      "target": 102
    },
    {
      "source": 102,
      "target": 103
    },
    {
      "source": 103,
      "target": 104
    },
    {
      "source": 104,
      "target": 105
    },
    {
      "source": 105,
      "target": 106
    },
    {
      "source": 106,
      "target": 107
    },
    {
      "source": 107,
      "target": 108
    },
    {
      "source": 108,
      "target": 109
    }
  ],
  "dataflow_edges": [
    {
      "source": 0,
      "target": 1,
      "variable": "LessThan"
    },
    {
      "source": 0,
      "target": 1,
      "variable": "x"
    },
    {
      "source": 0,
      "target": 1,
      "variable": "int"
    },
    {
      "source": 0,
      "target": 1,
      "variable": "a"
    },
    {
      "source": 0,
      "target": 2,
      "variable": "y"
    },
    {
      "source": 0,
      "target": 4,
      "variable": "b"
    },
    {
      "source": 0,
      "target": 9,
      "variable": "void"
    },
    {
      "source": 1,
      "target": 2,
      "variable": "LessThan"
    },
    {
      "source": 1,
      "target": 2,
      "variable": "x"
    },
    {
      "source": 1,
      "target": 4,
      "variable": "int"
    },
    {
      "source": 1,
      "target": 9,
      "variable": "a"
    },
    {
      "source": 2,
      "target": 9,
      "variable": "x"
    },
    {
      "source": 2,
      "target": 9,
      "variable": "y"
    },
    {
      "source": 2,
      "target": 9,
      "variable": "LessThan"
    },
    {
      "source": 3,
      "target": 12,
      "variable": "error"
    },
    {
      "source": 3,
      "target": 12,
      "variable": "assignment"
    },
    {
      "source": 4,
      "target": 9,
      "variable": "int"
    },
    {
      "source": 4,
      "target": 9,
      "variable": "b"
    },
    {
      "source": 4,
      "target": 10,
      "variable": "r"
    },
    {
      "source": 7,
      "target": 10,
      "variable": "flag"
    },
    {
      "source": 7,
      "target": 39,
      "variable": "public"
    },
    {
      "source": 7,
      "target": 55,
      "variable": "boolean"
    },
    {
      "source": 7,
      "target": 93,
      "variable": "static"
    },
    {
      "source": 9,
      "target": 10,
      "variable": "LessThan"
    },
    {
      "source": 9,
      "target": 10,
      "variable": "x"
    },
    {
      "source": 9,
      "target": 10,
      "variable": "int"
    },
    {
      "source": 9,
      "target": 10,
      "variable": "a"
    },
    {
      "source": 9,
      "target": 10,
      "variable": "b"
    },
    {
      "source": 9,
      "target": 11,
      "variable": "y"
    },
    {
      "source": 9,
      "target": 16,
      "variable": "void"
    },
    {
      "source": 10,
      "target": 11,
      "variable": "LessThan"
    },
    {
      "source": 10,
      "target": 11,
      "variable": "x"
    },
    {
      "source": 10,
      "target": 13,
      "variable": "int"
    },
    {
      "source": 10,
      "target": 13,
      "variable": "flag"
    },
    {
      "source": 10,
      "target": 13,
      "variable": "a"
    },
    {
      "source": 10,
      "target": 13,
      "variable": "b"
    },
    {
      "source": 11,
      "target": 20,
      "variable": "LessThan"
    },
    {
      "source": 11,
      "target": 20,
      "variable": "x"
    },
    {
      "source": 11,
      "target": 32,
      "variable": "y"
    },
    {
      "source": 12,
      "target": 19,
      "variable": "error"
    },
    {
      "source": 12,
      "target": 19,
      "variable": "assignment"
    },
    {
      "source": 13,
      "target": 16,
      "variable": "int"
    },
    {
      "source": 13,
      "target": 16,
      "variable": "a"
    },
    {
      "source": 13,
      "target": 16,
      "variable": "b"
    },
    {
      "source": 16,
      "target": 17,
      "variable": "a"
    },
    {
      "source": 16,
      "target": 17,
      "variable": "b"
    },
    {
      "source": 16,
      "target": 18,
      "variable": "c"
    },
    {
      "source": 16,
      "target": 20,
      "variable": "int"
    },
    {
      "source": 16,
      "target": 25,
      "variable": "void"
    },
    {
      "source": 17,
      "target": 18,
      "variable": "if"
    },
    {
      "source": 17,
      "target": 18,
      "variable": "b"
    },
    {
      "source": 17,
      "target": 20,
      "variable": "a"
    },
    {
      "source": 18,
      "target": 20,
      "variable": "c"
    },
    {
      "source": 18,
      "target": 40,
      "variable": "if"
    },
    {
      "source": 19,
      "target": 70,
      "variable": "error"
    },
    {
      "source": 19,
      "target": 82,
      "variable": "assignment"
    },
    {
      "source": 20,
      "target": 30,
      "variable": "LessThan"
    },
    {
      "source": 20,
      "target": 30,
      "variable": "int"
    },
    {
      "source": 20,
      "target": 31,
      "variable": "x"
    },
    {
      "source": 25,
      "target": 30,
      "variable": "void"
    },
    {
      "source": 26,
      "target": 30,
      "variable": "isLessThan"
    },
    {
      "source": 27,
      "target": 35,
      "variable": "isLessThanOrEqual"
    },
    {
      "source": 30,
      "target": 31,
      "variable": "NonNegative"
    },
    {
      "source": 30,
      "target": 31,
      "variable": "int"
    },
    {
      "source": 30,
      "target": 31,
      "variable": "end"
    },
    {
      "source": 30,
      "target": 31,
      "variable": "start"
    },
    {
      "source": 30,
      "target": 35,
      "variable": "LessThan"
    },
    {
      "source": 30,
      "target": 39,
      "variable": "void"
    },
    {
      "source": 30,
      "target": 87,
      "variable": "isLessThan"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "int"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "end"
    },
    {
      "source": 31,
      "target": 32,
      "variable": "start"
    },
    {
      "source": 31,
      "target": 35,
      "variable": "NonNegative"
    },
    {
      "source": 31,
      "target": 56,
      "variable": "x"
    },
    {
      "source": 32,
      "target": 35,
      "variable": "int"
    },
    {
      "source": 32,
      "target": 35,
      "variable": "start"
    },
    {
      "source": 32,
      "target": 35,
      "variable": "end"
    },
    {
      "source": 32,
      "target": 45,
      "variable": "Positive"
    },
    {
      "source": 32,
      "target": 45,
      "variable": "y"
    },
    {
      "source": 35,
      "target": 36,
      "variable": "end"
    },
    {
      "source": 35,
      "target": 36,
      "variable": "start"
    },
    {
      "source": 35,
      "target": 39,
      "variable": "int"
    },
    {
      "source": 35,
      "target": 46,
      "variable": "NonNegative"
    },
    {
      "source": 35,
      "target": 56,
      "variable": "LessThan"
    },
    {
      "source": 35,
      "target": 72,
      "variable": "isLessThanOrEqual"
    },
    {
      "source": 36,
      "target": 107,
      "variable": "return"
    },
    {
      "source": 39,
      "target": 40,
      "variable": "maximum"
    },
    {
      "source": 39,
      "target": 43,
      "variable": "int"
    },
    {
      "source": 39,
      "target": 54,
      "variable": "void"
    },
    {
      "source": 40,
      "target": 41,
      "variable": "maximum"
    },
    {
      "source": 40,
      "target": 44,
      "variable": "if"
    },
    {
      "source": 41,
      "target": 44,
      "variable": "maximum"
    },
    {
      "source": 41,
      "target": 51,
      "variable": "throw"
    },
    {
      "source": 41,
      "target": 51,
      "variable": "new"
    },
    {
      "source": 41,
      "target": 66,
      "variable": "IllegalArgumentException"
    },
    {
      "source": 41,
      "target": 66,
      "variable": "Negative"
    },
    {
      "source": 41,
      "target": 66,
      "variable": "argument"
    },
    {
      "source": 43,
      "target": 44,
      "variable": "count"
    },
    {
      "source": 43,
      "target": 45,
      "variable": "int"
    },
    {
      "source": 43,
      "target": 50,
      "variable": "getCount"
    },
    {
      "source": 44,
      "target": 45,
      "variable": "count"
    },
    {
      "source": 44,
      "target": 45,
      "variable": "maximum"
    },
    {
      "source": 44,
      "target": 65,
      "variable": "if"
    },
    {
      "source": 45,
      "target": 46,
      "variable": "int"
    },
    {
      "source": 45,
      "target": 46,
      "variable": "count"
    },
    {
      "source": 45,
      "target": 46,
      "variable": "maximum"
    },
    {
      "source": 46,
      "target": 50,
      "variable": "int"
    },
    {
      "source": 46,
      "target": 54,
      "variable": "NonNegative"
    },
    {
      "source": 46,
      "target": 64,
      "variable": "maximum"
    },
    {
      "source": 46,
      "target": 64,
      "variable": "count"
    },
    {
      "source": 46,
      "target": 69,
      "variable": "deleteIndex"
    },
    {
      "source": 50,
      "target": 54,
      "variable": "int"
    },
    {
      "source": 51,
      "target": 55,
      "variable": "new"
    },
    {
      "source": 51,
      "target": 61,
      "variable": "throw"
    },
    {
      "source": 51,
      "target": 61,
      "variable": "RuntimeException"
    },
    {
      "source": 54,
      "target": 55,
      "variable": "m"
    },
    {
      "source": 54,
      "target": 56,
      "variable": "int"
    },
    {
      "source": 54,
      "target": 60,
      "variable": "NonNegative"
    },
    {
      "source": 54,
      "target": 64,
      "variable": "void"
    },
    {
      "source": 55,
      "target": 56,
      "variable": "m"
    },
    {
      "source": 55,
      "target": 57,
      "variable": "has_modulus"
    },
    {
      "source": 55,
      "target": 61,
      "variable": "new"
    },
    {
      "source": 56,
      "target": 57,
      "variable": "int"
    },
    {
      "source": 56,
      "target": 57,
      "variable": "foo"
    },
    {
      "source": 56,
      "target": 57,
      "variable": "m"
    },
    {
      "source": 56,
      "target": 60,
      "variable": "LessThan"
    },
    {
      "source": 57,
      "target": 60,
      "variable": "int"
    },
    {
      "source": 57,
      "target": 60,
      "variable": "foo"
    },
    {
      "source": 60,
      "target": 64,
      "variable": "int"
    },
    {
      "source": 60,
      "target": 84,
      "variable": "in"
    },
    {
      "source": 60,
      "target": 93,
      "variable": "NonNegative"
    },
    {
      "source": 60,
      "target": 93,
      "variable": "LessThan"
    },
    {
      "source": 61,
      "target": 66,
      "variable": "throw"
    },
    {
      "source": 61,
      "target": 66,
      "variable": "new"
    },
    {
      "source": 64,
      "target": 65,
      "variable": "maximum"
    },
    {
      "source": 64,
      "target": 68,
      "variable": "count"
    },
    {
      "source": 64,
      "target": 69,
      "variable": "int"
    },
    {
      "source": 64,
      "target": 76,
      "variable": "void"
    },
    {
      "source": 65,
      "target": 66,
      "variable": "maximum"
    },
    {
      "source": 65,
      "target": 68,
      "variable": "if"
    },
    {
      "source": 66,
      "target": 68,
      "variable": "maximum"
    },
    {
      "source": 66,
      "target": 71,
      "variable": "argument"
    },
    {
      "source": 66,
      "target": 96,
      "variable": "throw"
    },
    {
      "source": 66,
      "target": 96,
      "variable": "new"
    },
    {
      "source": 68,
      "target": 69,
      "variable": "count"
    },
    {
      "source": 68,
      "target": 69,
      "variable": "maximum"
    },
    {
      "source": 68,
      "target": 77,
      "variable": "if"
    },
    {
      "source": 69,
      "target": 72,
      "variable": "deleteIndex"
    },
    {
      "source": 69,
      "target": 76,
      "variable": "count"
    },
    {
      "source": 69,
      "target": 76,
      "variable": "int"
    },
    {
      "source": 70,
      "target": 71,
      "variable": "error"
    },
    {
      "source": 70,
      "target": 81,
      "variable": "TODO"
    },
    {
      "source": 71,
      "target": 82,
      "variable": "error"
    },
    {
      "source": 71,
      "target": 86,
      "variable": "argument"
    },
    {
      "source": 72,
      "target": 88,
      "variable": "isLessThanOrEqual"
    },
    {
      "source": 76,
      "target": 77,
      "variable": "count"
    },
    {
      "source": 76,
      "target": 83,
      "variable": "int"
    },
    {
      "source": 77,
      "target": 78,
      "variable": "if"
    },
    {
      "source": 77,
      "target": 78,
      "variable": "count"
    },
    {
      "source": 78,
      "target": 83,
      "variable": "count"
    },
    {
      "source": 78,
      "target": 95,
      "variable": "if"
    },
    {
      "source": 81,
      "target": 84,
      "variable": "value"
    },
    {
      "source": 82,
      "target": 86,
      "variable": "error"
    },
    {
      "source": 83,
      "target": 85,
      "variable": "countDivMinus"
    },
    {
      "source": 83,
      "target": 93,
      "variable": "int"
    },
    {
      "source": 84,
      "target": 96,
      "variable": "store"
    },
    {
      "source": 84,
      "target": 105,
      "variable": "to"
    },
    {
      "source": 85,
      "target": 87,
      "variable": "countDivMinus"
    },
    {
      "source": 86,
      "target": 107,
      "variable": "error"
    },
    {
      "source": 87,
      "target": 88,
      "variable": "countDivMinus"
    },
    {
      "source": 93,
      "target": 94,
      "variable": "NonNegative"
    },
    {
      "source": 93,
      "target": 94,
      "variable": "int"
    },
    {
      "source": 94,
      "target": 95,
      "variable": "minCapacity"
    },
    {
      "source": 94,
      "target": 99,
      "variable": "int"
    },
    {
      "source": 94,
      "target": 99,
      "variable": "oldCapacity"
    },
    {
      "source": 95,
      "target": 100,
      "variable": "if"
    },
    {
      "source": 95,
      "target": 100,
      "variable": "minCapacity"
    },
    {
      "source": 96,
      "target": 104,
      "variable": "MAX_VALUE"
    },
    {
      "source": 99,
      "target": 100,
      "variable": "newCapacity"
    },
    {
      "source": 100,
      "target": 101,
      "variable": "newCapacity"
    },
    {
      "source": 100,
      "target": 101,
      "variable": "minCapacity"
    },
    {
      "source": 100,
      "target": 103,
      "variable": "if"
    },
    {
      "source": 101,
      "target": 103,
      "variable": "newCapacity"
    },
    {
      "source": 101,
      "target": 104,
      "variable": "Integer"
    },
    {
      "source": 103,
      "target": 104,
      "variable": "newCapacity"
    },
    {
      "source": 104,
      "target": 105,
      "variable": "newCapacity"
    },
    {
      "source": 105,
      "target": 108,
      "variable": "newCapacity"
    },
    {
      "source": 107,
      "target": 108,
      "variable": "return"
    }
  ]
}